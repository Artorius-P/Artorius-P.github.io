const n='--- \n\ntitle: Vim使用记录\ndate: 2021-11-05\nlang: zh_CN\ncategories:\n\n- study\n\n---\n\n# Vim使用记录\n\n推荐直接看书《Vim实用技巧》。Vim里面的高级用法真的是太多了，根本学不完。\n只能在慢慢的实践中记忆了。用好了确实能达到事半功倍的效果。然而人的记忆力是有限的。\n我只能说，Vim很强大，是我不配。\n\n## 文件编码相关\n\n- `:set ff?` 查看当前编码。\n- `:set ff=unix` 或`:set fileformat=dos` 在LF和CRLF之间切换。\n- `:set fileencoding?` 查看当前文件的编码。\n- `:set fileencoding=utf-8` 设置文件的编码。\n\n## 复制粘贴\n\n- `"+y` 或 `"*y` 使用系统剪切板（可能要依据情况），使用`p`时同理。\n  一般来说mac和windows只有一个剪切板，理论上`+`和`*`是相同的。\n  而在一般的X11中，`"+`代表了`CLIPBOARD`，即`Ctrl+C`时使用的剪切板。\n  `"*`代表了`Star is Select`，即选择时复制所使用的剪切板。但我测下来也不绝对。\n  还是要根据自己的具体情况来使用。一般来说用`+`应该没问题。\n\n## 重复性工作相关技巧\n\n- vim中的`.`命令是一个微型的宏，可以记录上一个esc到目前为止所做的工作流程。\n- 使用`:normal`命令可以在一系列连续行上执行一条普通模式命令,此命令在与`.`命令\n  或者宏使用时只需花费很少的努力就能完成大量重复性任务。\n\n例如，用`ggVG`选中全文所有内容，然后`:%normal i#`给全文加上注释。\n\n`:%normal A;`给全文的行尾加上分号。另一种方法是使用`<Ctrl+v>`进入块可视化模式。\n然后用`jj$`跳到所有的行尾，然后使用`A;`插入分号。\n\n- 使用`*`命令可以快速搜索当前单词，跳转操作与用`/`搜索一样。\n\n- 实用`>`和`<`可以控制缩进，但是要进入可视化模式。比如`vG`。\n\n- 通过寄存器录制命令也是一个好方法，比如临时录制一些操作，可以用在normal模式下，用`q`加上寄存器名，如`qa`然后录制你的命令，再次按下`q`结束录制。调用该命令时使用`@`加上寄存器名，如`@a`，也可以重复多次,如`6@a`\n\n## 寄存器\n\nVim 提供了 10 类寄存器，可在 Vim 中通过 `:help registers` 查看帮助。\n\n1. 匿名寄存器 `""`\n2. 编号寄存器 `"0` 到 `"9`\n3. 小删除寄存器 `"-`\n4. 26 个命名寄存器 `"a` 到 `"z`\n5. 3 个只读寄存器 `":`, `".`, `"%`\n6. Buffer 交替文件寄存器 `"#`\n7. 表达式寄存器 `"=`\n8. 选区和拖放寄存器 `"*`, `"+`, `"~`\n9. 黑洞寄存器 `"_`\n10. 搜索模式寄存器 `"/`\n\n编号寄存器从 `"0` 到 `"9` 共 10 个，其中 `"0` 保存着拷贝来的字符串，`"1` 到 `"9` 保存着删除掉的字符串。 删除操作符包括 `s`, `c`, `d`, `x`。 删除掉的字符串会被存到 `"1` 中，上次删除的则会被存到 `"2` 中。以此类推，Vim 会保存你最近的 9 次删除。\n\n命名寄存器有 `"a` 到 `"z` 共 26 个，这些寄存器只有当我们指定时才会被使用。 其实我们在录制宏时，所有键盘操作会以字符串的形式存到寄存器中。 例如录制一个宏存到 `"a` 寄存器中，内容为更改当前行 `cc`，改为 `foo` 字符串：\n\n```\nqaccfoo\n```\n\n然后执行 `:reg` 来查看寄存器，可以发现 `a` 寄存器的值是 `ccfoo`。\n\n> 小技巧：当使用小写字母进行操作时会覆盖当前寄存器内容，当使用大写字母进行操作时，会追加当前寄存器内容。\n\n## 快速移动技巧\n\n- vim中区分屏幕行和实际行，如果要在屏幕行上移动的话在命令前加个`g`就可以了。比如说`gj`，`gk`。\n- 使用`^`可以移动到行前第一个非空白字符。\n- 多使用`f{char}`命令。这应该是Vim中最快的移动方式之一。要跳多次只需要结合`;`一起使用就可以了。\n  如果不小心跳过头了可以用`,`再跳回来。`F{char}`则是反向查找。\n\n## 一些冷知识\n\n- `<Ctrl+[>`的功能和`<ESC>`是相同的。都是切换到普通模式。\n- 在插入模式下，使用`<Ctrl+w>`可以删除前一个单词，使用`<Ctrl+u>`可以删除至行首。(然而对中文来说并没有那么好用)\n- 在插入模式下粘贴寄存器中的内容`<Ctrl+r>{register}`，其中，{register}是寄存器的名字。\n';export{n as default};
