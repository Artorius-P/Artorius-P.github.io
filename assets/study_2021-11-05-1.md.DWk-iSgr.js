import{_ as o,c,o as d,ag as t}from"./chunks/framework.tfLYlFWj.js";const p=JSON.parse('{"title":"Vim使用记录","description":"","frontmatter":{"title":"Vim使用记录","date":"2021-11-05T00:00:00.000Z","lang":"zh_CN","categories":["study"]},"headers":[],"relativePath":"study/2021-11-05-1.md","filePath":"study/2021-11-05-1.md","lastUpdated":1758246806000}'),l={name:"study/2021-11-05-1.md"};function i(a,e,r,u,s,n){return d(),c("div",null,[...e[0]||(e[0]=[t('<h1 id="vim使用记录" tabindex="-1">Vim使用记录 <a class="header-anchor" href="#vim使用记录" aria-label="Permalink to &quot;Vim使用记录&quot;">​</a></h1><p>推荐直接看书《Vim实用技巧》。Vim里面的高级用法真的是太多了，根本学不完。 只能在慢慢的实践中记忆了。用好了确实能达到事半功倍的效果。然而人的记忆力是有限的。 我只能说，Vim很强大，是我不配。</p><h2 id="文件编码相关" tabindex="-1">文件编码相关 <a class="header-anchor" href="#文件编码相关" aria-label="Permalink to &quot;文件编码相关&quot;">​</a></h2><ul><li><code>:set ff?</code> 查看当前编码。</li><li><code>:set ff=unix</code> 或<code>:set fileformat=dos</code> 在LF和CRLF之间切换。</li><li><code>:set fileencoding?</code> 查看当前文件的编码。</li><li><code>:set fileencoding=utf-8</code> 设置文件的编码。</li></ul><h2 id="复制粘贴" tabindex="-1">复制粘贴 <a class="header-anchor" href="#复制粘贴" aria-label="Permalink to &quot;复制粘贴&quot;">​</a></h2><ul><li><code>&quot;+y</code> 或 <code>&quot;*y</code> 使用系统剪切板（可能要依据情况），使用<code>p</code>时同理。 一般来说mac和windows只有一个剪切板，理论上<code>+</code>和<code>*</code>是相同的。 而在一般的X11中，<code>&quot;+</code>代表了<code>CLIPBOARD</code>，即<code>Ctrl+C</code>时使用的剪切板。 <code>&quot;*</code>代表了<code>Star is Select</code>，即选择时复制所使用的剪切板。但我测下来也不绝对。 还是要根据自己的具体情况来使用。一般来说用<code>+</code>应该没问题。</li></ul><h2 id="重复性工作相关技巧" tabindex="-1">重复性工作相关技巧 <a class="header-anchor" href="#重复性工作相关技巧" aria-label="Permalink to &quot;重复性工作相关技巧&quot;">​</a></h2><ul><li>vim中的<code>.</code>命令是一个微型的宏，可以记录上一个esc到目前为止所做的工作流程。</li><li>使用<code>:normal</code>命令可以在一系列连续行上执行一条普通模式命令,此命令在与<code>.</code>命令 或者宏使用时只需花费很少的努力就能完成大量重复性任务。</li></ul><p>例如，用<code>ggVG</code>选中全文所有内容，然后<code>:%normal i#</code>给全文加上注释。</p><p><code>:%normal A;</code>给全文的行尾加上分号。另一种方法是使用<code>&lt;Ctrl+v&gt;</code>进入块可视化模式。 然后用<code>jj$</code>跳到所有的行尾，然后使用<code>A;</code>插入分号。</p><ul><li><p>使用<code>*</code>命令可以快速搜索当前单词，跳转操作与用<code>/</code>搜索一样。</p></li><li><p>实用<code>&gt;</code>和<code>&lt;</code>可以控制缩进，但是要进入可视化模式。比如<code>vG</code>。</p></li><li><p>通过寄存器录制命令也是一个好方法，比如临时录制一些操作，可以用在normal模式下，用<code>q</code>加上寄存器名，如<code>qa</code>然后录制你的命令，再次按下<code>q</code>结束录制。调用该命令时使用<code>@</code>加上寄存器名，如<code>@a</code>，也可以重复多次,如<code>6@a</code></p></li></ul><h2 id="寄存器" tabindex="-1">寄存器 <a class="header-anchor" href="#寄存器" aria-label="Permalink to &quot;寄存器&quot;">​</a></h2><p>Vim 提供了 10 类寄存器，可在 Vim 中通过 <code>:help registers</code> 查看帮助。</p><ol><li>匿名寄存器 <code>&quot;&quot;</code></li><li>编号寄存器 <code>&quot;0</code> 到 <code>&quot;9</code></li><li>小删除寄存器 <code>&quot;-</code></li><li>26 个命名寄存器 <code>&quot;a</code> 到 <code>&quot;z</code></li><li>3 个只读寄存器 <code>&quot;:</code>, <code>&quot;.</code>, <code>&quot;%</code></li><li>Buffer 交替文件寄存器 <code>&quot;#</code></li><li>表达式寄存器 <code>&quot;=</code></li><li>选区和拖放寄存器 <code>&quot;*</code>, <code>&quot;+</code>, <code>&quot;~</code></li><li>黑洞寄存器 <code>&quot;_</code></li><li>搜索模式寄存器 <code>&quot;/</code></li></ol><p>编号寄存器从 <code>&quot;0</code> 到 <code>&quot;9</code> 共 10 个，其中 <code>&quot;0</code> 保存着拷贝来的字符串，<code>&quot;1</code> 到 <code>&quot;9</code> 保存着删除掉的字符串。 删除操作符包括 <code>s</code>, <code>c</code>, <code>d</code>, <code>x</code>。 删除掉的字符串会被存到 <code>&quot;1</code> 中，上次删除的则会被存到 <code>&quot;2</code> 中。以此类推，Vim 会保存你最近的 9 次删除。</p><p>命名寄存器有 <code>&quot;a</code> 到 <code>&quot;z</code> 共 26 个，这些寄存器只有当我们指定时才会被使用。 其实我们在录制宏时，所有键盘操作会以字符串的形式存到寄存器中。 例如录制一个宏存到 <code>&quot;a</code> 寄存器中，内容为更改当前行 <code>cc</code>，改为 <code>foo</code> 字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>qaccfoo</span></span></code></pre></div><p>然后执行 <code>:reg</code> 来查看寄存器，可以发现 <code>a</code> 寄存器的值是 <code>ccfoo</code>。</p><blockquote><p>小技巧：当使用小写字母进行操作时会覆盖当前寄存器内容，当使用大写字母进行操作时，会追加当前寄存器内容。</p></blockquote><h2 id="快速移动技巧" tabindex="-1">快速移动技巧 <a class="header-anchor" href="#快速移动技巧" aria-label="Permalink to &quot;快速移动技巧&quot;">​</a></h2><ul><li>vim中区分屏幕行和实际行，如果要在屏幕行上移动的话在命令前加个<code>g</code>就可以了。比如说<code>gj</code>，<code>gk</code>。</li><li>使用<code>^</code>可以移动到行前第一个非空白字符。</li><li>多使用<code>f{char}</code>命令。这应该是Vim中最快的移动方式之一。要跳多次只需要结合<code>;</code>一起使用就可以了。 如果不小心跳过头了可以用<code>,</code>再跳回来。<code>F{char}</code>则是反向查找。</li></ul><h2 id="一些冷知识" tabindex="-1">一些冷知识 <a class="header-anchor" href="#一些冷知识" aria-label="Permalink to &quot;一些冷知识&quot;">​</a></h2><ul><li><code>&lt;Ctrl+[&gt;</code>的功能和<code>&lt;ESC&gt;</code>是相同的。都是切换到普通模式。</li><li>在插入模式下，使用<code>&lt;Ctrl+w&gt;</code>可以删除前一个单词，使用<code>&lt;Ctrl+u&gt;</code>可以删除至行首。(然而对中文来说并没有那么好用)</li><li>在插入模式下粘贴寄存器中的内容<code>&lt;Ctrl+r&gt;{register}</code>，其中，{register}是寄存器的名字。</li></ul>',23)])])}const h=o(l,[["render",i]]);export{p as __pageData,h as default};
