import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.tfLYlFWj.js";const g=JSON.parse('{"title":"OpenCV C++ 学习笔记","description":"","frontmatter":{"title":"OpenCV C++ 学习笔记","date":"2022-05-04T00:00:00.000Z","lang":"zh_CN","categories":["study"]},"headers":[],"relativePath":"study/2022-05-04-1.md","filePath":"study/2022-05-04-1.md","lastUpdated":1758246806000}'),h={name:"study/2022-05-04-1.md"};function k(l,s,t,e,E,d){return n(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="opencv-c-学习笔记" tabindex="-1">OpenCV C++ 学习笔记 <a class="header-anchor" href="#opencv-c-学习笔记" aria-label="Permalink to &quot;OpenCV C++ 学习笔记&quot;">​</a></h1><p>最近项目需要使用基于C++版本的OpenCV，又被迫开了一个新坑。</p><h2 id="opencv的编译安装" tabindex="-1">OpenCV的编译安装 <a class="header-anchor" href="#opencv的编译安装" aria-label="Permalink to &quot;OpenCV的编译安装&quot;">​</a></h2><p>本来准备使用Arch仓库里自带的opencv，奈何编译出问题，只好自己编译。没想到一下就踩进另一个坑。</p><p>使用视频流输入输出需要使用ffmpeg，然而ffmpeg从4.x到5.x作出了巨大的改动，OpenCV4.5.5还没有支持5.x版本的ffmpeg。 导致编译到百分之三十多的时候会因为ffmpeg的api变了而报错。所以就需要自己指定ffmpeg版本。Arch仓库里自带了4.4版本的ffmpeg。先安装，然后要修改opencv的cmake文件。</p><p>在寻找ffmpeg的cmake代码<code>opencv/modules/videoio/cmake/detect_ffmpeg.cmake</code>的开头是这样的：</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAVE_FFMPEG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPENCV_FFMPEG_USE_FIND_PACKAGE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OPENCV_FFMPEG_USE_FIND_PACKAGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STREQUAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPENCV_FFMPEG_USE_FIND_PACKAGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STREQUAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OPENCV_FFMPEG_USE_FIND_PACKAGE </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FFMPEG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${OPENCV_FFMPEG_USE_FIND_PACKAGE}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Required components: AVCODEC AVFORMAT AVUTIL SWSCALE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FFMPEG_FOUND </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFmpeg_FOUND)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HAVE_FFMPEG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TRUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>其实就是用find_package来寻找ffmpeg，然而这样找到的版本就是5.x的，所以得改这段代码, 因为4.4没有对应的cmake文件，所以find_package是找不到的。但是它有pkg-config文件<code>/usr/lib/ffmpeg4.4/pkgconfig/</code>， 所以我们应该使用pkg-config来进行查找。</p><p>直接上代码。</p><div class="language-CMake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CMake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAVE_FFMPEG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPENCV_FFMPEG_USE_FIND_PACKAGE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OPENCV_FFMPEG_USE_FIND_PACKAGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STREQUAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPENCV_FFMPEG_USE_FIND_PACKAGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STREQUAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #set(OPENCV_FFMPEG_USE_FIND_PACKAGE &quot;FFMPEG&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OPENCV_FFMPEG_USE_FIND_PACKAGE </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PkgConfig REQUIRED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENV{PKG_CONFIG_PATH} /usr/lib/ffmpeg4.4/pkgconfig/)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${OPENCV_FFMPEG_USE_FIND_PACKAGE}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Required components: AVCODEC AVFORMAT AVUTIL SWSCALE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pkg_check_modules(LIBAV REQUIRED IMPORTED_TARGET</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libavdevice</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libavfilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libavformat</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libavcodec</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libswresample</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libswscale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    libavutil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FFMPEG_FOUND </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FFmpeg_FOUND)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HAVE_FFMPEG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TRUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>再次编译opencv，报错消失，问题解决。</p><h2 id="后续" tabindex="-1">后续 <a class="header-anchor" href="#后续" aria-label="Permalink to &quot;后续&quot;">​</a></h2><p>甲方也搞不定C++，妥协了，用Python了😅</p>`,13)])])}const F=i(h,[["render",k]]);export{g as __pageData,F as default};
